# Variables and Simple Data Types

Traceback: when you make a mistake in your code the interpreter provides a traceback to help you identify where
the mistake occured.

#Useful string methods:
.title() prints the string with the first letter of each word in upper case
.lower() prints all lower case
.upper() prints all upper case

#Using f-strings
f-strings (format strings) are usefull since you don't have to use + simbol to concatenate
example:

name = 'john'
last_name = 'doe'
full_name = f'{name} {last_name}'

#Scape character '\'
examples:
tab \t
new line \n
new line and tab \n\t

#Stripping white space

.rstrip() strips white space from the right end of the string
.lstrip() strips left end of the string
.strip() strips both ends

#Removing the prefix

.removeprefix("prefix to remove")
.removesuffix("suffix to remove")

#Numbers

to represent exponents use two muliplication symbols:
	>>>3 ** 2
	>>>9

Floats = decimal numbers because the decimal point can be at any position in a number
When working with floats you may get unexpected results for example:
	>>>3 * 0.1
	>>>0.3000000000004
This is because Python tries to give the most accurate answer, this is easy to deal
with and of little concern.

When you divide any two numbers, even if they are integers that result in a whole
number when divided, you'll always get a float.
When you do any operation mixing a float and an integer you'll always get a float.

When typing long numbers in python code you can group numbers using the underscore
to make them more readable:
	>>>money = 1_000_000
	>>>print(money)
	>>>1000000
The interpreter ignores the underscores, they are simply there to make the number
more humanly readable. This works for both integers and floats.

#Multiple Assignment

You can initialize variables in a single lines by separating them with commas

	>>>x, y, z = 0, 0, 0

#Constants

Python does not have a constants type but programmers use all capitalt letters to
denote variables whose value does not change.

	>>>MAX_THREADS = 15


